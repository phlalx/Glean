"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[925],{3905:function(e,t,n){n.r(t),n.d(t,{MDXContext:function(){return c},MDXProvider:function(){return u},mdx:function(){return h},useMDXComponents:function(){return d},withMDXComponents:function(){return p}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){return function(t){var n=d(t.components);return a.createElement(e,i({},t,{components:n}))}},d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(n),u=r,f=p["".concat(l,".").concat(u)]||p[u]||m[u]||i;return n?a.createElement(f,s(s({ref:t},c),{},{components:n})):a.createElement(f,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=f;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},20173:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=(n(44256),["components"]),s={id:"advanced",title:"Advanced Query Features",sidebar_label:"Advanced Query Features"},o=void 0,c={unversionedId:"angle/advanced",id:"angle/advanced",isDocsHomePage:!1,title:"Advanced Query Features",description:"Types and signatures",source:"@site/docs/angle/advanced.md",sourceDirName:"angle",slug:"/angle/advanced",permalink:"/docs/angle/advanced",editUrl:"https://github.com/facebookincubator/Glean/tree/main/glean/website/docs/angle/advanced.md",tags:[],version:"current",frontMatter:{id:"advanced",title:"Advanced Query Features",sidebar_label:"Advanced Query Features"},sidebar:"someSidebar",previous:{title:"Query Efficiency",permalink:"/docs/angle/efficiency"},next:{title:"Debugging",permalink:"/docs/angle/debugging"}},p=[{value:"Types and signatures",id:"types-and-signatures",children:[],level:2},{value:"Explicit fact IDs",id:"explicit-fact-ids",children:[],level:2},{value:"Functional predicates",id:"functional-predicates",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h2",{id:"types-and-signatures"},"Types and signatures"),(0,i.mdx)("p",null,"Angle queries are ",(0,i.mdx)("em",{parentName:"p"},"strongly typed"),": the server will check your query for type-safety before executing it. Type-checking ensures that the query makes sense; that it's not trying to pattern-match strings against integers, or look for a field in a record that doesn't exist for example."),(0,i.mdx)("p",null,"Angle's type-checker isn't very clever, though. It mostly doesn't do type ",(0,i.mdx)("em",{parentName:"p"},"inference"),", it checks that expressions have the intended type. When it doesn't know the intended type of an expression, it uses a dumb inference mode that can only infer the type when it's really obvious: like a fact match, or a string."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-lang=angle"},'facts> P where C = { name = "Fish" }; example.Parent { C, P }\ncan\'t infer the type of: {name = "Fish"}\n    try adding a type annotation like ({name = "Fish"} : T)\n    or reverse the statement (Q = P instead of P = Q)\n')),(0,i.mdx)("p",null,"In cases like this, Angle's type-checker needs a bit of help. We can use a ",(0,i.mdx)("em",{parentName:"p"},"type signature")," to supply more information about the type:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-lang=angle"},'facts> P where C = { name = "Fish" } : example.Class; example.Parent { C, P }\n{ "id": 1024, "key": { "name": "Pet", "line": 10 } }\n')),(0,i.mdx)("p",null,"Here we used ",(0,i.mdx)("inlineCode",{parentName:"p"},'{ name = "Fish" } : example.Class'),' to tell Angle the expected type of the pattern. You should read the colon as "has type", and the type can be any valid Angle type, for details see ',(0,i.mdx)("a",{parentName:"p",href:"/docs/schema/types"},"Built-in types"),"."),(0,i.mdx)("h2",{id:"explicit-fact-ids"},"Explicit fact IDs"),(0,i.mdx)("p",null,"Every fact has an ID, which is a 64-bit integer that uniquely identifies the fact in a particular database. You've probably noticed these fact IDs in the query results: every result has an ",(0,i.mdx)("inlineCode",{parentName:"p"},"id")," field with the fact ID, and a ",(0,i.mdx)("inlineCode",{parentName:"p"},"key")," field with the fact key."),(0,i.mdx)("p",null,"Most Angle queries don't need to mention fact IDs explicitly, but sometimes it's useful. For example, you might need to perform a query to fetch some results, do some custom filtering on the results and then query Glean again using some of the fact IDs from the first query."),(0,i.mdx)("p",null,"WARNING: a fact ID only makes sense in the context of a particular database, so make sure that your query that mentions fact IDs is being made on the same database that you obtained the fact ID from originally."),(0,i.mdx)("p",null,"Glean has a syntax for referring to fact IDs directly; for example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-lang=angle"},'facts> $1026 : example.Class\n{ "id": 1026, "key": { "name": "Fish", "line": 30 } }\n')),(0,i.mdx)("p",null,"the syntax is ",(0,i.mdx)("inlineCode",{parentName:"p"},"$<fact ID>"),", but you will often want to use it with a ",(0,i.mdx)("a",{parentName:"p",href:"#types-and-signatures"},"type signature"),", as ",(0,i.mdx)("inlineCode",{parentName:"p"},"$<fact ID> : <predicate>"),"."),(0,i.mdx)("p",null,"If you get the predicate wrong, Glean will complain:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-lang=angle"},"facts> $1026 : example.Parent\n*** Exception: fact has the wrong type\n")),(0,i.mdx)("p",null,"The type can be omitted only if it is clear from the context, for example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-lang=angle"},'facts> example.Parent { child = $1026 }\n{ "id": 1029, "key": { "child": { "id": 1026 }, "parent": { "id": 1024 } } }\n')),(0,i.mdx)("p",null,"Sometimes you might want to use multiple fact IDs in a query. Or-patterns come in handy here:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-lang=angle"},"facts> example.Parent { child = $1026 | $1027 }\n")),(0,i.mdx)("h2",{id:"functional-predicates"},"Functional predicates"),(0,i.mdx)("p",null,"All the predicates we've seen so far have been key-only predicates. A predicate can also have a ",(0,i.mdx)("em",{parentName:"p"},"value"),"; we call these ",(0,i.mdx)("em",{parentName:"p"},"functional predicates")," or ",(0,i.mdx)("em",{parentName:"p"},"key-value predicates"),"."),(0,i.mdx)("p",null,"For example, we might model a reference to a class in our example schema like this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-lang=angle"},"predicate Reference :\n  { file : string, line : nat, column : nat } -> Class\n")),(0,i.mdx)("p",null,"This says that for a given (file,line,column) there can be at most one reference to a Class.  This uniqueness is the important property of a key-value predicate: for each key there is at most one value."),(0,i.mdx)("p",null,"We query for key-value predicates using this syntax:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-lang=angle"},'facts> C where example.Reference { file = "x", line = 1, column = 2 } -> C\n')),(0,i.mdx)("p",null,"The pattern after the ",(0,i.mdx)("inlineCode",{parentName:"p"},"->")," matches the value. It can be an arbitrary pattern, just like the key. Note that facts cannot be efficiently searched by value, so the pattern that matches the value is a filter only."))}u.isMDXComponent=!0}}]);