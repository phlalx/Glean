"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[949],{3905:function(e,n,r){r.r(n),r.d(n,{MDXContext:function(){return s},MDXProvider:function(){return m},mdx:function(){return h},useMDXComponents:function(){return d},withMDXComponents:function(){return c}});var t=r(67294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},a.apply(this,arguments)}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function u(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=t.createContext({}),c=function(e){return function(n){var r=d(n.components);return t.createElement(e,a({},n,{components:r}))}},d=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},m=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),c=d(r),m=i,f=c["".concat(o,".").concat(m)]||c[m]||p[m]||a;return r?t.createElement(f,l(l({ref:n},s),{},{components:r})):t.createElement(f,l({ref:n},s))}));function h(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=f;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=r[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},12038:function(e,n,r){r.d(n,{EO:function(){return l},O1:function(){return o},Rr:function(){return u}});var t,i=r(67294),a=r(44256);function o(e){return i.createElement("a",{href:t+e.file},e.file)}function l(e){return i.createElement("a",{href:t+e.file},e.children)}t=(0,a.isInternal)()?"https://www.internalfb.com/code/fbsource/fbcode/":"https://github.com/facebookincubator/Glean/tree/master/";var u=function(e){e.children;var n=e.internal,r=e.external;return(0,a.fbContent)({internal:i.createElement("code",null,n),external:i.createElement("code",null,r)})}},82692:function(e,n,r){r.r(n),r.d(n,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return d}});var t=r(87462),i=r(63366),a=(r(67294),r(3905)),o=(r(44256),r(12038)),l=["components"],u={id:"lsif-rust",title:"Rust",sidebar_label:"Rust"},s=void 0,c={unversionedId:"indexer/lsif-rust",id:"indexer/lsif-rust",isDocsHomePage:!1,title:"Rust",description:"To index Rust we use rust-analyzer in LSIF mode. Pre-built binaries of rust-analyzer can be used as indexers that emit LSIF from Rust source.",source:"@site/docs/indexer/lsif-rust.md",sourceDirName:"indexer",slug:"/indexer/lsif-rust",permalink:"/docs/indexer/lsif-rust",editUrl:"https://github.com/facebookincubator/Glean/tree/main/glean/website/docs/indexer/lsif-rust.md",tags:[],version:"current",frontMatter:{id:"lsif-rust",title:"Rust",sidebar_label:"Rust"},sidebar:"someSidebar",previous:{title:"Go",permalink:"/docs/indexer/lsif-go"},next:{title:"Java",permalink:"/docs/indexer/lsif-java"}},d=[{value:"Run the indexer",id:"run-the-indexer",children:[],level:2},{value:"In the shell",id:"in-the-shell",children:[],level:2},{value:"Schema",id:"schema",children:[],level:2}],m={toc:d};function p(e){var n=e.components,r=(0,i.Z)(e,l);return(0,a.mdx)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"To index ",(0,a.mdx)("a",{parentName:"p",href:"https://www.rust-lang.org/"},"Rust")," we use ",(0,a.mdx)("a",{parentName:"p",href:"https://rust-analyzer.github.io/"},"rust-analyzer")," in LSIF mode. Pre-built binaries of ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/rust-analyzer/rust-analyzer/releases"},"rust-analyzer")," can be used as indexers that emit LSIF from Rust source."),(0,a.mdx)("h2",{id:"run-the-indexer"},"Run the indexer"),(0,a.mdx)("p",null,"The indexer is run via the main ",(0,a.mdx)("inlineCode",{parentName:"p"},"glean")," CLI tool."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"> cabal build exe:glean\n")),(0,a.mdx)("p",null,"And index your Rust repository with:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"glean index rust-lsif DIR --repo name/hash\n")),(0,a.mdx)("p",null,"where"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"DIR")," is the root directory containing the Rust project"),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"name/hash")," is the name of the repository to create")),(0,a.mdx)("p",null,"Provide the usual ",(0,a.mdx)("inlineCode",{parentName:"p"},"--db-root")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"--schema")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"--service")," arguments\nto ",(0,a.mdx)("inlineCode",{parentName:"p"},"glean")),(0,a.mdx)("h2",{id:"in-the-shell"},"In the shell"),(0,a.mdx)("p",null,"Rust source can also be indexed directly from the Glean shell:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},":index rust-lsif DIR\n")),(0,a.mdx)("p",null,"The shell will pick a DB name and hash for you based on ",(0,a.mdx)("inlineCode",{parentName:"p"},"DIR"),"."),(0,a.mdx)("h2",{id:"schema"},"Schema"),(0,a.mdx)("p",null,"The schema is in ",(0,a.mdx)(o.O1,{file:"glean/schema/source/lsif.angle",mdxType:"SrcFile"})))}p.isMDXComponent=!0}}]);