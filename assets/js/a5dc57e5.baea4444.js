"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[943],{3905:function(e,t,n){n.r(t),n.d(t,{MDXContext:function(){return c},MDXProvider:function(){return d},mdx:function(){return h},useMDXComponents:function(){return s},withMDXComponents:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),m=function(e){return function(t){var n=s(t.components);return a.createElement(e,i({},t,{components:n}))}},s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,f=m["".concat(o,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},64163:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return s}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=n(44256),l=["components"],p={id:"basic",title:"Basic Concepts",sidebar_label:"Basic Concepts"},c=void 0,m={unversionedId:"schema/basic",id:"schema/basic",isDocsHomePage:!1,title:"Basic Concepts",description:"This section explains the concepts behind how Glean stores data, and",source:"@site/docs/schema/basic.md",sourceDirName:"schema",slug:"/schema/basic",permalink:"/docs/schema/basic",editUrl:"https://github.com/facebookincubator/Glean/tree/main/glean/website/docs/schema/basic.md",tags:[],version:"current",frontMatter:{id:"basic",title:"Basic Concepts",sidebar_label:"Basic Concepts"},sidebar:"someSidebar",previous:{title:"Walkthrough",permalink:"/docs/walkthrough"},next:{title:"Built-in Types",permalink:"/docs/schema/types"}},s=[],d={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"This section explains the concepts behind how Glean stores data, and\nhow to define a schema to describe your data."),(0,i.mdx)(o.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,i.mdx)("p",null,"For a more formal description, see ",(0,i.mdx)("a",{parentName:"p",href:"https://fb.workplace.com/notes/roman-leshchinskiy/glean-a-little-formally/504151247034061/"},"Glean, a little formally"),".")),(0,i.mdx)("p",null,"A Glean Database consists of a set of ",(0,i.mdx)("strong",{parentName:"p"},(0,i.mdx)("em",{parentName:"strong"},"Facts")),". Facts are unique;\neach fact is stored only once."),(0,i.mdx)("p",null,"The ",(0,i.mdx)("strong",{parentName:"p"},(0,i.mdx)("em",{parentName:"strong"},"Schema"))," describing the database is a set of\n",(0,i.mdx)("strong",{parentName:"p"},(0,i.mdx)("em",{parentName:"strong"},"Predicates")),". You can think of the predicates as the types of the\nfacts. Each fact is an instance of one predicate."),(0,i.mdx)("p",null,"A predicate looks like this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"predicate P : KeyType -> ValueType\n")),(0,i.mdx)("p",null,"where"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"P")," is the name of the predicate. e.g. ",(0,i.mdx)("inlineCode",{parentName:"li"},"src.File")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"KeyType")," is the ",(0,i.mdx)("em",{parentName:"li"},"key type")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ValueType")," is the ",(0,i.mdx)("em",{parentName:"li"},"value type"))),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"KeyType")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"ValueType")," are types; the type language is described in\n",(0,i.mdx)("a",{parentName:"p",href:"/docs/schema/types"},"Built-in Types"),"."),(0,i.mdx)("p",null,"Every ",(0,i.mdx)("em",{parentName:"p"},"fact")," in predicate P has:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"A ",(0,i.mdx)("strong",{parentName:"li"},(0,i.mdx)("em",{parentName:"strong"},"Fact ID")),": a unique 64-bit integer that identifies the fact"),(0,i.mdx)("li",{parentName:"ul"},"A ",(0,i.mdx)("strong",{parentName:"li"},(0,i.mdx)("em",{parentName:"strong"},"Key")),", a term of type ",(0,i.mdx)("inlineCode",{parentName:"li"},"KeyType")),(0,i.mdx)("li",{parentName:"ul"},"A ",(0,i.mdx)("strong",{parentName:"li"},(0,i.mdx)("em",{parentName:"strong"},"Value")),", a term of type ",(0,i.mdx)("inlineCode",{parentName:"li"},"ValueType"))),(0,i.mdx)("p",null,'(we use "term" here to avoid confusion with the use of "value" in a predicate).'),(0,i.mdx)("p",null,"Often the value is empty, represented by the empty record ",(0,i.mdx)("inlineCode",{parentName:"p"},"{}"),". Most\npredicates have all their information in the key."),(0,i.mdx)("p",null,"You can think of Glean as like a key/value store: we can look up a key\n",(0,i.mdx)("inlineCode",{parentName:"p"},"K")," in predicate ",(0,i.mdx)("inlineCode",{parentName:"p"},"P")," and get back value ",(0,i.mdx)("inlineCode",{parentName:"p"},"V.")," We can also query for\n",(0,i.mdx)("em",{parentName:"p"},"patterns")," that match multiple keys, and get back all the facts that\nmatch the pattern. More about this when we talk about ",(0,i.mdx)("a",{parentName:"p",href:"/docs/angle/intro"},"Angle"),"\nqueries."))}u.isMDXComponent=!0}}]);